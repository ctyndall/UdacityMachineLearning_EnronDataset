qplot(x = color, y = price, data = diamonds, geom = 'boxplot') + scale_y_continuous(limits = c(0,5000))
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') + coord_cartesian(ylim = c(0,5000))
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') + coord_cartesian(ylim = c(0,8000))
by(diamonds$price, diamonds$color, summary)
?diamonds
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds$color == 'D')$price)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
qplot(x = price, data = diamonds) + facet_wrap(~color, scales = "free_y") +
scale_x_log10()
qplot(x = price/carat, data = diamonds) + facet_wrap(~color, scales = "free_y") +
scale_x_log10()
qplot(x = carat, data = diamonds, binwidth = 0.1, geom = 'freqpoly')
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly')
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly')
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + scale_y_continous(limits = c(1900, 2100))
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + scale_y_continuous(limits = c(1900, 2100))
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100))
scale_x_continous(breaks= c(0,4, 0.01))
scale_x_continuous(breaks= c(0,4, 0.01))
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
scale_x_continuous(breaks= c(0,4, 0.01))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
scale_x_continuous(breaks= c(0,4, 0.01))
scale_x_continuous(lim = c(0,2), breaks= c(0,2, 0.01))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
scale_x_continuous(lim = c(0,2), breaks= c(0,2, 0.01))
by(diamonds$carat, diamond$price, summary )
by(diamonds$carat, diamonds$price, summary )
by(diamonds$carat, diamonds$price, count > 2000)
by(diamonds$carat, diamonds$price, count)
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
qplot(x = carat, data = diamonds, binwidth = 0.001, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
scale_x_continuous(lim = c(0,2), breaks= c(0,2, 0.01))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') + coord_cartesian(ylim = c(1900, 2100)) +
scale_x_continuous(lim = c(0,2), breaks= c(0,2, 0.01))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') + coord_cartesian(ylim = c(1000, 2100)) +
scale_x_continuous(lim = c(0,2), breaks= c(0,2, 0.01))
coord_cartesian(ylim = c(1000, 2100), xlim= c(2000, 3000))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim= c(2000, 3000))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim= c(0, 3000))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100))
#prob13
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim = c(0.2, 0.4))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim = c(0.79, 0.81))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim = c(1.0, 1.2))
coord_cartesian(ylim = c(1000, 2100), xlim = c(0, 4))
#prob13
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(1000, 2100), xlim = c(0, 4))
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(2000, 2100), xlim = c(0, 4))
#problem 1
library(ggplot2)
data = diamonds
str(diamonds)
ggplot(aes(x = x ,y = price) + geom_point()
ggplot(aes(x = x ,y = price)) + geom_point()
df = diamonds
ggplot(aes(x = x ,y = price), data = diamonds) + geom_point()
?x
diamonds?
?diamonds
ggplot(aes(x = x ,y = price), data = diamonds) + geom_point()
#
cor.test(x = diamonds$x, y = diamonds$price)
cor.test(x = diamonds$y, y = diamonds$price)
cor.test(x = diamonds$z, y = diamonds$price)
ggplot(aes(depth, price), data = diamonds) + geom_point()
?diamonds
#prob5
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continous(breaks = 2)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = 2)
#prob5
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100)
x = (1:10)
x
x = (1:10:20)
x
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(0, 80, 2))
cor.test(x = diamonds$depth, y = diamonds$price)
ggplot(data = diamonds, aes(carat, price)) + geom_point()
?quantile
?subset
quartile(diamonds$price)
y.fun = quartile
?xlim
ggplot(data = diamonds, aes(carat, price)) + geom_point(stat= 'summary') +
scale_x_continuous(limx = )
ggplot(data = diamonds, aes(carat, price)) + geom_point(stat= 'summary', fun.y = quantile, probs = .99)
ggplot(data = diamonds, aes(carat, price)) + geom_point(stat= 'summary', fun.y = quantile, probs = .01)
ggplot(data = diamonds, aes(carat, price)) + geom_point(stat= 'summary', fun.y = quantile, probs = .01, fun.x = quantile, probes = 0.99)
ggplot(data = diamonds, aes(carat, price)) + geom_point(stat= 'summary', fun.y = quantile, probs = .99, fun.x = quantile, probes = 0.99)
ggplot(data = diamonds, aes(carat, price)) + geom_point(fun.y = quantile, probs = .99, fun.x = quantile, probes = 0.99)
ggplot(data = diamonds, aes(carat, price)) + geom_point(fun.y = quantile, probs = 0.1, fun.x = quantile, probes = 0.1)
ggplot(data = diamonds, aes(carat, price)) + geom_point(alpha = 1/100, fun.y = quantile, probs = 0.1, fun.x = quantile, probes = 0.1)
ggplot(data = diamonds, aes(carat, price)) + geom_point(alpha = 1/100, fun.y = quantile, probs = 0.9, fun.x = quantile, probes = 0.9)
ggplot(data = diamonds, aes(carat, price)) + geom_point(alpha = 1/100, stat = 'summary', fun.y = quantile, probs = 0.9, fun.x = quantile, probes = 0.9)
summary(price)
summary(diamond$price)
summary(diamonds$price)
ggplot(data = diamonds, aes(carat, price)) + geom_point(alpha = 1/100, fun.y = quantile, probs = 0.9, fun.x = quantile, probes = 0.9)
ggplot(data = diamonds, aes(carat, price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(limits = quantile(diamonds$carat, c(0,0.99)) +
scale_y_continuous(limits = quantile(diamonds$price, c(0,0.99))
ggplot(data = diamonds, aes(carat, price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(limits = quantile(diamonds$carat, c(0,0.99))) +
scale_y_continuous(limits = quantile(diamonds$price, c(0,0.99)))
ggplot(data = diamonds, aes(carat, price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(limits = quantile(diamonds$carat, c(0,0.1))) +
scale_y_continuous(limits = quantile(diamonds$price, c(0,0.1)))
ggplot(data = diamonds, aes(carat, price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(limits = quantile(diamonds$carat, c(0,0.99))) +
scale_y_continuous(limits = quantile(diamonds$price, c(0,0.99)))
?quantile
quantil(diamonds$price, probs = c(.2, .5, .7, 1))
quantile(diamonds$price, probs = c(.2, .5, .7, 1))
scale_y_continuous?
?scale_y_continuous
df$volume <- diamonds$x * diamonds$y * diamonds$
df$volume
df$volume
df$volume
df$volume <- diamonds$x * diamonds$y * diamonds$z
df$volume
#prob9
df$volume <- diamonds$x * diamonds$y * diamonds$
ggplot(data = df, aes(volume, price))
df$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(data = df, aes(volume, price)) + geom_point(alpha = 1/100)
ggplot(data = df, aes(volume, price)) + geom_point(alpha = 1)
df_cropped <- subset(df, volume > 0 & volume <= 800 )
df_cropped
summary(df_cropped$volume)
cor.test(x = df_cropped$volume, y = df_cropped$price)
ggplot(data = df_cropped, aes(x = volume, y = price)) + geom_point(alpha = 1/20)
ggplot(data = df_cropped, aes(x = volume, y = price)) + geom_point(alpha = 1/100)
geom_smooth()
ggplot(data = df_cropped, aes(x = volume, y = price)) +
geom_point(alpha = 1/100) +
geom_smooth()
ggplot(data = df_cropped, aes(x = volume, y = price)) +
geom_point(alpha = 1)
?geom_smooth
ggplot(data = df_cropped, aes(x = volume, y = price)) +
geom_point(alpha = 1) +
stat_smooth(method = "lm", formula = y ~ x, size = 1))
#prob11
ggplot(data = df_cropped, aes(x = volume, y = price)) +
geom_point(alpha = 1) +
stat_smooth(method = "lm", formula = y ~ x, size = 1)
library(dplyr)
?dplyr
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(price),
price_min = min(price),
price_max = max(price)
n = n()) %>%
arrange(clarity)
df$clarity
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(price),
price_min = min(price),
price_max = max(price)
n = n()) %>%
arrange(n)
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(price),
price_min = min(price),
price_max = max(price)
n = n())
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(price),
price_min = min(price),
price_max = max(price),
n = n()) %>%
arrange(clarity)
diamondByClarity
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(price),
price_min = min(price),
price_max = max(price),
n = n()) %>%
arrange(clarity)
df$clarity
diamondsByClarity <- df %>%
group_by(clarity) %>%
summarize(price_mean = mean(price),
price_median = median(as.numeric(price)),
price_min = min(price),
price_max = max(price),
n = n()) %>%
arrange(clarity)
summary(diamondsByClarity)
summary(df$clarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
View(diamonds_by_clarity)
View(diamonds_by_clarity)
View(diamonds_mp_by_clarity)
View(diamonds_mp_by_clarity)
?geom_hist
p1 <- ggplot() + geom_histogram(data = diamonds_by_clarity)
p1
View(diamonds_mp_by_color)
p1 <- ggplot(aes(color, mean_price)) + geom_histogram(data = diamonds_by_clarity)
p1 <- ggplot(aes(color, mean_price), data = diamonds_by_clarity) + geom_histogram()
p1
View(diamonds_mp_by_color)
View(diamonds_mp_by_clarity)
p1 <- ggplot(aes(clarity, mean_price), data = diamonds_mp_by_clarity) + geom_histogram()
p1
p1 <- ggplot(aes(clarity), data = diamonds_mp_by_clarity) + geom_histogram(stat = 'bin')
p1
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_histogram(stat = 'bin')
p1
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_histogram(stat= 'y')
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_histogram()
p1
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_bar()
p1
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_bar(stat = "identity)
p1
p1
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_bar(stat = "identity)
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_bar(stat = "identity")
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) + geom_bar(stat = "identity")
p1
p2 <- ggplot(aes(color,mean_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p2 <- ggplot(aes(color,mean_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p2
library(grid.arrange)
library(gridExtra)
grid.arrange(p1, p2)
?diamonds
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) +
geom_bar(stat = "identity")
p2 <- ggplot(aes(color,mean_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p3 <- ggplot(aes(cut,mean_price), data = diamonds_mp_by_cut) +
geom_bar(stat = "identity")
library(gridExtra)
grid.arrange(p1, p2, p3)
p3 <- ggplot(aes(cut,mean_price), data = diamonds_mp_by_cut) +
geom_bar(stat = "identity")
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p1 <- ggplot(aes(clarity,mean_price), data = diamonds_mp_by_clarity) +
geom_bar(stat = "identity")
p2 <- ggplot(aes(color,mean_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p3 <- ggplot(aes(cut,mean_price), data = diamonds_mp_by_cut) +
geom_bar(stat = "identity")
library(gridExtra)
grid.arrange(p1, p2, p3)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, median_price = median(as.numeric(price)))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, median_price = median(as.numeric(price))
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, median_price = median(as.numeric(price))
p1 <- ggplot(aes(clarity,median_price), data = diamonds_mp_by_clarity) +
geom_bar(stat = "identity")
p2 <- ggplot(aes(color,median_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p3 <- ggplot(aes(cut,median_price), data = diamonds_mp_by_cut) +
geom_bar(stat = "identity")
library(gridExtra)
grid.arrange(p1, p2, p3)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, median_price = median(as.numeric(price)))
View(diamonds_by_clarity)
View(diamonds_mp_by_clarity)
View(diamonds_mp_by_color)
View(diamonds_mp_by_cut)
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, median_price = median(as.numeric(price)))
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, median_price = median(as.numeric(price)))
p1 <- ggplot(aes(clarity,median_price), data = diamonds_mp_by_clarity) +
geom_bar(stat = "identity")
p2 <- ggplot(aes(color,median_price), data = diamonds_mp_by_color) +
geom_bar(stat = "identity")
p3 <- ggplot(aes(cut,median_price), data = diamonds_mp_by_cut) +
geom_bar(stat = "identity")
library(gridExtra)
grid.arrange(p1, p2, p3)
pwd
getwd()
#problem 1
library(ggplot2)
data(diamonds)
ggplot(aes(x=price, fill = cut), data = diamonds) +
geom_histogram() +
facet_wrap(~color) +
scale_fill_brewer(type = 'qual') +
scale_x_log10()
View(df)
library(ggplot2)
library(GGally)
ggtitle('Price (log10)')
```
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
# 2. Replace YOUR_NAME with your actual name in the vector
# 'udacious' and run the code. Be sure to use quotes around it.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
# Notice how R updates 'udacious' in the workspace.
library(ggplot2)
package.install(plyr)
install(plyr)
install.pakcage(plyr)
install.package(plyr)
install.package(ggplot2)
install.packages(ggplot2)
install.packages(plr)
install.packages(plyr)
install.packages("ggplot2")
library(ggplot2)
data(diamonds)
ggplot(aes(x=price, fill = cut), data = diamonds) +
geom_histogram() +
facet_wrap(~color) +
scale_fill_brewer(type = 'qual') +
scale_x_log10()
ggplot(aes(x=table, y=price, color=cut, alpha = 0.2), data=diamonds)+
geom_point()+
scale_color_brewer(type = 'qual')
install.packags(knitr)
install.packages("knitr"")
install.packages("knitr")
install.packages(c("BH", "crayon", "DBI", "digest", "dplyr", "evaluate", "formatR", "gridExtra", "hexbin", "highr", "Hmisc", "htmltools", "httr", "jsonlite", "latticeExtra", "lazyeval", "lme4", "manipulate", "maps", "maptools", "memoise", "mime", "multcomp", "munsell", "mvtnorm", "plot3D", "quantreg", "R6", "Rcpp", "RcppEigen", "rgl", "sandwich", "scales", "scatterplot3d", "sp", "SparseM", "stringi", "stringr", "swirl", "testit", "testthat", "TH.data", "XML", "zoo"))
install.packages(c("BH", "crayon", "DBI", "digest", "dplyr",
setwd("~/")
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2)
install.packages("ggplot2")
qplot(x = price, data = diamonds)
#prob4
dim(subset(diamonds, price < 500))
dim(subset(diamonds, price < 250))
dim(subset(diamonds, price >= 15000))
#prob5
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(0, 2000))
#ggsave('priceHistogram.png')
#prob6
#subset(diamonds, price > 18790)
#subset(diamonds, price < 350)
by(diamonds$price, diamonds$cut, max)
library(ggplot2)
#prob 2
qplot(x = price, data = diamonds)
#prob4
dim(subset(diamonds, price < 500))
dim(subset(diamonds, price < 250))
dim(subset(diamonds, price >= 15000))
#prob5
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(0, 2000))
#ggsave('priceHistogram.png')
#prob6
#subset(diamonds, price > 18790)
#subset(diamonds, price < 350)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, median)
#prob8
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free_y")
#prob9
qplot(x = price/carat, data = diamonds) + facet_wrap(~cut, scales = "free_y") +
scale_x_log10()
#prob10
#boxplot(price~color, data = diamonds)
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') + coord_cartesian(ylim = c(0,8000))
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
#prob12
qplot(x = price/carat, data = diamonds) + facet_wrap(~color, scales = "free_y") +
scale_x_log10()
#prob13
qplot(x = carat, data = diamonds, binwidth = 0.01, geom = 'freqpoly') +
coord_cartesian(ylim = c(2000, 2100), xlim = c(0, 4))
by(diamonds$carat, diamonds$price, count)
packages.install('markdown')
install.packages('markdown')
install.packages('base64encode')
install.packages("knitr")
install.packages('base64encode')
install.packages('base64enc')
install.packages("jsonlite")
library(ggplot2)
data(diamonds)
ggplot(data=diamonds, aes(x=carat, y=price)) +
geom_point() +
lims(x=c(0,quantile(diamonds$carat, 0.99)), y =c(0,quantile(diamonds$price, 0.99)))
```
***
### Price and Carat Relationship
Response:
***
### Frances Gerety
Notes:
#### A diamonds is
***
### The Rise of Diamonds
Notes:
***
### ggpairs Function
Notes:
```{r ggpairs Function}
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("plyr")
install.packages("knitr", dependencies=T)
install.packages("ggplot2", dependencies = T)
?pairs
setwd("C:/Users/Me/Udacity/Project5/ud120_projects-master/final_project")
library(corrgram)
df <- read.csv("data.csv")
df$X <- NULL
df$email_address <- NULL
df$poi <- NULL
df$loan_advances <- NULL
df$director_fees <- NULL
corrgram(df, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt
)
library(corrgram)
library.install(corrgram)
install(corrgram)
install.packages(corrgram)
library(corrplot)
install.packages(corrgram)
install.packages(correplot)
install.packages(corrplot)
install.packages('corrgram')
setwd("C:/Users/Me/Udacity/Project5/ud120_projects-master/final_project")
library('corrgram')
df <- read.csv("data.csv")
df$email_address <- NULL
df$X <- NULL
df$poi <- NULL
df$loan_advances <- NULL
df$director_fees <- NULL
corrgram(df, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt
)
